<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ResourceFlowDirection" xml:space="preserve">
    <value>LeftToRight</value>
    <comment>Controls the FlowDirection for all elements in the RootFrame. Set to the traditional direction of this resource file's language</comment>
  </data>
  <data name="ResourceLanguage" xml:space="preserve">
    <value>en</value>
    <comment>Controls the Language and ensures that the font for all elements in the RootFrame aligns with the app's language. Set to the language code of this resource file's language.</comment>
  </data>
  <data name="ApplicationTitle" xml:space="preserve">
    <value />
  </data>
  <data name="AppBarButtonText" xml:space="preserve">
    <value>add</value>
  </data>
  <data name="AppBarMenuItemText" xml:space="preserve">
    <value>Menu Item</value>
  </data>
  <data name="StartPageTitle" xml:space="preserve">
    <value>start page</value>
  </data>
  <data name="FeedbackNo" xml:space="preserve">
    <value>No, grazie!</value>
  </data>
  <data name="FeedbackMessage1" xml:space="preserve">
    <value>Mi dispiace che tu non abbia voluto votare Obbligo o Verità.

Parlaci della tua esperienza con l'app o suggeriscici come migliorarla!</value>
  </data>
  <data name="FeedbackTitle" xml:space="preserve">
    <value>Possiamo migliorarla?</value>
  </data>
  <data name="FeedbackYes" xml:space="preserve">
    <value>Dai Feedback</value>
  </data>
  <data name="RatingNo" xml:space="preserve">
    <value>No, grazie!</value>
  </data>
  <data name="RatingMessage1" xml:space="preserve">
    <value>Sarebbe splendido se votassi l'app con 5 stelle.

Mostrare apprezzamento sullo store ci aiuta a continuare a lavorare sull'app e rendere le cose migliori!</value>
  </data>
  <data name="RatingMessage2" xml:space="preserve">
    <value>Sembra che tu stia usando molto Obbligo o Verità!

Perchè non dare 5 stelle per dirci che ti piace?</value>
  </data>
  <data name="RatingTitle" xml:space="preserve">
    <value>fasdfasdfasdfasdfsdfsdfsdfsdfs</value>
  </data>
  <data name="RatingYes" xml:space="preserve">
    <value>Dai 5 stelle</value>
  </data>
  <data name="FeedbackBody" xml:space="preserve">
    <value>[Il tuo commento va qui]


---------------------------------
Device Name: {0}
Device Manufacturer: {1}
Device Firmware Version: {2}
Device Hardware Version: {3}
Application Version: {4}
---------------------------------</value>
  </data>
  <data name="FeedbackSubject" xml:space="preserve">
    <value>ToR Feedback</value>
  </data>
  <data name="FeedbackTo" xml:space="preserve">
    <value>AresDev@outlook.it</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>add players</value>
  </data>
  <data name="Avanti" xml:space="preserve">
    <value>next</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>back to menu</value>
  </data>
  <data name="Continue" xml:space="preserve">
    <value>wanna play again?</value>
  </data>
  <data name="Db" xml:space="preserve">
    <value>database</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>done</value>
  </data>
  <data name="End" xml:space="preserve">
    <value>finish</value>
  </data>
  <data name="Hello" xml:space="preserve">
    <value>hi, player</value>
  </data>
  <data name="Inserisci" xml:space="preserve">
    <value>insert your name!</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>next player</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>no</value>
  </data>
  <data name="Nuova" xml:space="preserve">
    <value>new game</value>
  </data>
  <data name="Obbligo" xml:space="preserve">
    <value>dare</value>
  </data>
  <data name="Play" xml:space="preserve">
    <value>play</value>
  </data>
  <data name="Player" xml:space="preserve">
    <value>players</value>
  </data>
  <data name="Points" xml:space="preserve">
    <value>points</value>
  </data>
  <data name="Refused" xml:space="preserve">
    <value>refused</value>
  </data>
  <data name="Scegli" xml:space="preserve">
    <value>choose the mood!</value>
  </data>
  <data name="Verità" xml:space="preserve">
    <value>truth</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>yes</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>Truth or dare is a the classic group game where you have to answer sincerely to different questions or do something that entertains your friends. In this game you will find hundreds of questions and dares.              The game works with shifts, at the end of every shift, the player receives a score depending on how he passed the test. In the end, the winner is the player with the higher score.</value>
  </data>
  <data name="Insert" xml:space="preserve">
    <value>add truth or dare</value>
  </data>
  <data name="Visualize" xml:space="preserve">
    <value>see the database</value>
  </data>
  <data name="Text1" xml:space="preserve">
    <value>Attention!</value>
  </data>
  <data name="Text2" xml:space="preserve">
    <value>Do you really wanna end the game?</value>
  </data>
</root>